package mooc;

package mooc.ui;

public interface UserInterface {
  void update();
}
package mooc.ui;

public class TextUserInterface implements UserInterface {
  public void update() {
    System.out.println("Updating the user interface");
  }
}
package mooc.logic;

import mooc.ui.UserInterface;

public class ApplicationLogic {
  private UserInterface ui;
  
  public ApplicationLogic(UserInterface ui) {
    this.ui = ui;
  }
  
  public void execute(int howManyTimes) {
    for (int i = 0; i < howManyTimes; i++) {
      System.out.println("The application logic works");
      ui.update();
    }
  }
}
public class Main {
  public static void main(String[] args) {
    UserInterface ui = new TextUserInterface();
    ApplicationLogic logic = new ApplicationLogic(ui);
    logic.execute(5);
  }
}


public class Person {
  private String name;
  private int age;
  
  public Person(String name, int age) {
    if (name == null || name.trim().isEmpty() || name.length() > 40) {
      throw new IllegalArgumentException("Invalid name");
    }
    if (age < 0 || age > 120) {
      throw new IllegalArgumentException("Invalid age");
    }
    this.name = name;
    this.age = age;
  }
  
  // Other methods and fields
}

public class Main {
  public static void main(String[] args) {
    try {
      Person person1 = new Person("John", 30);
      // Valid name and age, no exception thrown
    } catch (IllegalArgumentException e) {
      System.out.println(e.getMessage());
    }
    
    try {
      Person person2 = new Person("", 30);
      // Invalid name, exception thrown
    } catch (IllegalArgumentException e) {
      System.out.println(e.getMessage());
    }
    
    try {
      Person person3 = new Person("John", 130);
      // Invalid age, exception thrown
    } catch (IllegalArgumentException e) {
      System.out.println(e.getMessage());
    }
  }
}

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;

public class Printer {
  private String fileName;
  
  public Printer(String fileName) throws IOException {
    this.fileName = fileName;
  }
  
  public void printLinesWhichContain(String word) throws IOException {
    try (BufferedReader reader = new BufferedReader(new FileReader(fileName))) {
      String line;
      while ((line = reader.readLine()) != null) {
        if (word.isEmpty() || line.contains(word)) {
          System.out.println(line);
        }
      }
    }
  }
}

public class Main {
  public static void main(String[] args) throws IOException {
    Printer printer = new Printer("src/textfile.txt");
    printer.printLinesWhichContain("");
    printer.printLinesWhichContain("vanha");
  }
}


import java.io.File;
import java.io.FileNotFoundException;
import java.util.Scanner;

public class Analysis {
  private File file;
  private int lines;
  private int characters;
  
  public Analysis(File file) throws FileNotFoundException {
    this.file = file;
    
    try (Scanner reader = new Scanner(file)) {
      while (reader.hasNextLine()) {
        String line = reader.nextLine();
        lines++;
        characters += line.length();
      }
    }
  }
  
  public int lines() {
    return lines;
  }
  
  public int characters() {
    return characters;
  }
}
import java.io.File;

public class Main {
  public static void main(String[] args) throws FileNotFoundException {
    File file = new File("test/testfile.txt");
    Analysis analysis = new Analysis(file);
    System.out.println("Lines: " + analysis.lines());
    System.out.println("Characters: " + analysis.characters());
  }
}

